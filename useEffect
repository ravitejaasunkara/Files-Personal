Let's say you have an application that fetches data from an API and you want to make that data available to all the components in your application. You can create a context for this data and use useContext to consume it in any component that needs it.

First, you can create the context using the createContext function:

javascript
Copy code
import React from 'react';

const DataContext = React.createContext();
Next, you can define a component that provides the context value:

javascript
Copy code
import React, { useState, useEffect } from 'react';

const DataContext = React.createContext();

function DataProvider(props) {
  const [data, setData] = useState(null);

  useEffect(() => {
    // Fetch data from API and set state
    const fetchData = async () => {
      const response = await fetch('/api/data');
      const data = await response.json();
      setData(data);
    };

    fetchData();
  }, []);

  return (
    <DataContext.Provider value={data}>
      {props.children}
    </DataContext.Provider>
  );
}
This component uses the useEffect hook to fetch data from an API and set the state using the setData function. It then provides the data as the value for the context using the DataContext.Provider component.

Finally, you can consume the context in any component that needs the data using the useContext hook:

javascript
Copy code
import React, { useContext } from 'react';

const DataContext = React.createContext();

function MyComponent() {
  const data = useContext(DataContext);

  if (!data) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1>{data.title}</h1>
      <p>{data.description}</p>
    </div>
  );
}
This component uses the useContext hook to consume the data context. It checks if the data is available and displays a loading message if it's not. If the data is available, it displays the title and description.

That's a basic example of how you can use useContext to pass data down the component tree in your React application.



